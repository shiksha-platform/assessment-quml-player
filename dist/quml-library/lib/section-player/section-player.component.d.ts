import { AfterViewInit, ChangeDetectorRef, EventEmitter, OnChanges } from '@angular/core';
import { ErrorService } from '@project-sunbird/sunbird-player-sdk-v9';
import { CarouselComponent } from 'ngx-bootstrap/carousel';
import { Subject, Subscription } from 'rxjs';
import { QumlPlayerConfig, IParentConfig } from '../quml-library-interface';
import { QuestionCursor } from '../quml-question-cursor.service';
import { ViewerService } from '../services/viewer-service/viewer-service';
import { UtilService } from '../util-service';
import { ISideBarEvent } from '@project-sunbird/sunbird-player-sdk-v9/sunbird-player-sdk.interface';
export declare class SectionPlayerComponent implements OnChanges, AfterViewInit {
    viewerService: ViewerService;
    utilService: UtilService;
    questionCursor: QuestionCursor;
    private cdRef;
    errorService: ErrorService;
    sectionConfig: QumlPlayerConfig;
    attempts: {
        max: number;
        current: number;
    };
    isFirstSection: boolean;
    jumpToQuestion: any;
    mainProgressBar: any;
    sectionIndex: number;
    parentConfig: IParentConfig;
    playerEvent: EventEmitter<any>;
    telemetryEvent: EventEmitter<any>;
    sectionEnd: EventEmitter<any>;
    score: EventEmitter<any>;
    summary: EventEmitter<any>;
    showScoreBoard: EventEmitter<any>;
    myCarousel: CarouselComponent;
    imageModal: any;
    questionSlide: any;
    destroy$: Subject<boolean>;
    loadView: boolean;
    showContentError: boolean;
    noOfTimesApiCalled: number;
    currentSlideIndex: number;
    showStartPage: boolean;
    sideMenuConfig: {
        enable: boolean;
        showShare: boolean;
        showDownload: boolean;
        showReplay: boolean;
        showExit: boolean;
    };
    threshold: number;
    questions: any[];
    questionIds: string[];
    questionIdsCopy: string[];
    noOfQuestions: number;
    initialTime: number;
    timeLimit: any;
    warningTime: number;
    showTimer: any;
    showFeedBack: boolean;
    showUserSolution: boolean;
    startPageInstruction: string;
    maxScore: number;
    points: number;
    initializeTimer: boolean;
    totalScore: number;
    linearNavigation: boolean;
    showHints: any;
    allowSkip: boolean;
    progressBarClass: any[];
    currentQuestionsMedia: any;
    disableNext: boolean;
    endPageReached: boolean;
    tryAgainClicked: boolean;
    currentOptionSelected: string;
    carouselConfig: {
        NEXT: number;
        PREV: number;
    };
    active: boolean;
    showAlert: boolean;
    currentOptions: any;
    currentQuestion: any;
    media: any;
    currentSolutions: any;
    showSolution: any;
    optionSelectedObj: any;
    intervalRef: any;
    alertType: string;
    infoPopup: boolean;
    outcomeLabel: string;
    stopAutoNavigation: boolean;
    jumpSlideIndex: any;
    showQuestions: boolean;
    showZoomModal: boolean;
    zoomImgSrc: string;
    imageZoomCount: number;
    replayed: boolean;
    sectionId: string;
    showRootInstruction: boolean;
    slideDuration: number;
    initialSlideDuration: number;
    disabledHandle: any;
    subscription: Subscription;
    constructor(viewerService: ViewerService, utilService: UtilService, questionCursor: QuestionCursor, cdRef: ChangeDetectorRef, errorService: ErrorService);
    ngOnChanges(changes: any): void;
    ngAfterViewInit(): void;
    private subscribeToEvents;
    private setConfig;
    removeAttribute(): void;
    sortQuestions(): void;
    createSummaryObj(): {
        skipped: any;
        correct: any;
        wrong: any;
        partial: any;
    };
    nextSlide(): void;
    prevSlide(): void;
    getQuestion(): void;
    resetQuestionState(): void;
    activeSlideChange(event: any): void;
    nextSlideClicked(event: any): void;
    previousSlideClicked(event: any): void;
    getCurrentSectionIndex(): number;
    goToSlideClicked(event: any, index: any): void;
    onEnter(event: any, index: any): void;
    jumpToSection(identifier: string): void;
    onSectionEnter(event: any, identifier: string): void;
    onScoreBoardClicked(): void;
    onScoreBoardEnter(event: KeyboardEvent): void;
    focusOnNextButton(): void;
    getOptionSelected(optionSelected: any): void;
    durationEnds(): void;
    private checkCompatibilityLevel;
    emitSectionEnd(isDurationEnded?: boolean, jumpToSection?: string): void;
    closeAlertBox(event: any): void;
    setSkippedClass(index: any): void;
    sideBarEvents(event: ISideBarEvent): void;
    handleSideBarAccessibility(event: any): void;
    validateSelectedOption(option: any, type?: string): void;
    infoPopupTimeOut(): void;
    correctFeedBackTimeOut(type?: string): void;
    goToSlide(index: any): void;
    goToQuestion(event: any): void;
    highlightQuestion(): void;
    getSolutions(): void;
    viewSolution(): void;
    closeSolution(): void;
    viewHint(): void;
    showAnswerClicked(event: any, question?: any): void;
    getScore(currentIndex: any, key: any, isCorrectAnswer: any, selectedOption?: any): any;
    calculateScore(): any;
    updateScoreBoard(index: any, classToBeUpdated: any, optionValue?: any, score?: any): void;
    setImageHeightWidthClass(): void;
    setImageZoom(): void;
    zoomIn(): void;
    zoomOut(): void;
    setImageModalHeightWidth(): void;
    closeZoom(): void;
    clearTimeInterval(): void;
    ngOnDestroy(): void;
}
